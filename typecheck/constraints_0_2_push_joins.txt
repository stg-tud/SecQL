RecursionResult(
    unionAdd(
        projection(
            selection[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]](
                table1381876443: Table[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]][ref=QueryTable(idb.BagTable@525dc2db,false,false,false)],
                ((x12:Int,x13:sae.typecheck.Exp$ExpKind,x14:scala.collection.Seq[Any],x15:scala.collection.Seq[Int])): Boolean => {
                    val x16 = x15.length
                    val x17 = x16 == 0
                    x17
                }
            )[ref=Sym(19)],
            ((x1:Int,x2:sae.typecheck.Exp$ExpKind,x3:scala.collection.Seq[Any],x4:scala.collection.Seq[Int])): scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]] => {
                val x5 = px5 // static data: <function1>
                val x6 = Seq()
                val x8 = x5(x1,x2,x3,x6)
                val x9 = (x1,x8)
                x9
            }
        )[ref=Sym(20)],
        projection(
            projection(
                equiJoin(
                    selection[scala.Tuple2[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]], scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]]](
                        crossProduct[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]],scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]](
                            selection[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]](
                                table1381876443: Table[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]][ref=QueryTable(idb.BagTable@525dc2db,false,false,false)],
                                (x72: scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]): Boolean => {
                                    val x72 = x70._1
                                    val x75 = x72._4
                                    val x76 = x75.length
                                    val x77 = x76 == 2
                                    x77
                                }
                            )[ref=Sym(81)],
                            Recursion(
                                projection(
                                    selection[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]](
                                        table1381876443: Table[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]][ref=QueryTable(idb.BagTable@525dc2db,false,false,false)],
                                        ((x12:Int,x13:sae.typecheck.Exp$ExpKind,x14:scala.collection.Seq[Any],x15:scala.collection.Seq[Int])): Boolean => {
                                            val x16 = x15.length
                                            val x17 = x16 == 0
                                            x17
                                        }
                                    )[ref=Sym(19)],
                                    ((x1:Int,x2:sae.typecheck.Exp$ExpKind,x3:scala.collection.Seq[Any],x4:scala.collection.Seq[Int])): scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]] => {
                                        val x5 = px5 // static data: <function1>
                                        val x6 = Seq()
                                        val x8 = x5(x1,x2,x3,x6)
                                        val x9 = (x1,x8)
                                        x9
                                    }
                                )[ref=Sym(20)],
                                Sym(117)
                            )
                        )[ref=Sym(82)],
                        (x86: scala.Tuple2[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]], scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]]): Boolean => {
                            val x88 = x86._1
                            val x91 = x88._4
                            val x92 = x91(0)
                            val x89 = x86._2
                            val x93 = x89._1
                            val x94 = x92 == x93
                            x94
                        }
                    )[ref=Sym(97)],
                    Recursion(
                        projection(
                            selection[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]](
                                table1381876443: Table[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]][ref=QueryTable(idb.BagTable@525dc2db,false,false,false)],
                                ((x12:Int,x13:sae.typecheck.Exp$ExpKind,x14:scala.collection.Seq[Any],x15:scala.collection.Seq[Int])): Boolean => {
                                    val x16 = x15.length
                                    val x17 = x16 == 0
                                    x17
                                }
                            )[ref=Sym(19)],
                            ((x1:Int,x2:sae.typecheck.Exp$ExpKind,x3:scala.collection.Seq[Any],x4:scala.collection.Seq[Int])): scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]] => {
                                val x5 = px5 // static data: <function1>
                                val x6 = Seq()
                                val x8 = x5(x1,x2,x3,x6)
                                val x9 = (x1,x8)
                                x9
                            }
                        )[ref=Sym(20)],
                        Sym(117)
                    ),
                    Seq(
                        (
                        (x101: scala.Tuple2[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]], scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]]): Int => {
                            val x103 = x101._1
                            val x106 = x103._4
                            val x107 = x106(1)
                            x107
                        },
                        (x102: scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]): Int => {
                            val x108 = x102._1
                            x108
                        }
                        )
                    )
                )[ref=Sym(113)],
                ((x61:scala.Tuple2[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]], scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]],x62:scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]])): scala.Tuple3[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]], scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]], scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]] => {
                    val x63 = x61._1
                    val x64 = x61._2
                    val x65 = (x63,x64,x62)
                    x65
                }
            )[ref=Sym(114)],
            ((x21:scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]],x22:scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]],x23:scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]])): scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]] => {
                val x24 = x21._1
                val x25 = x21._2
                val x26 = x21._3
                val x28 = px28 // static data: <function1>
                val x30 = x22._2
                val x32 = x23._2
                val x33 = Seq(x30,x32)
                val x35 = x28(x24,x25,x26,x33)
                val x36 = (x24,x35)
                x36
            }
        )[ref=Sym(115)]
    )[ref=Sym(116)]
)