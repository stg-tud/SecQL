RecursionResult(
    unionAdd(
        projection(
            selection[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]](
                table27741867: Table[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]][ref=QueryTable(idb.BagTable@1a74eab,false,false,false)],
                ((x12:Int,x13:sae.typecheck.Exp$ExpKind,x14:scala.collection.Seq[Any],x15:scala.collection.Seq[Int])): Boolean => {
                    val x16 = x15.length
                    val x17 = x16 == 0
                    x17
                }
            )[ref=Sym(19)],
            ((x1:Int,x2:sae.typecheck.Exp$ExpKind,x3:scala.collection.Seq[Any],x4:scala.collection.Seq[Int])): scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]] => {
                val x5 = px5 // static data: <function1>
                val x6 = Seq()
                val x8 = x5(x1,x2,x3,x6)
                val x9 = (x1,x8)
                x9
            }
        )[ref=Sym(20)],
        unionAdd(
            unionAdd(
                projection(
                    equiJoin(
                        selection[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]](
                            table27741867: Table[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]][ref=QueryTable(idb.BagTable@1a74eab,false,false,false)],
                            (x36: scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]): Boolean => {
                                val x41 = x36._4
                                val x42 = x41.length
                                val x43 = x42 == 1
                                x43
                            }
                        )[ref=Sym(53)],
                        Recursion(
                            projection(
                                selection[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]](
                                    table27741867: Table[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]][ref=QueryTable(idb.BagTable@1a74eab,false,false,false)],
                                    ((x12:Int,x13:sae.typecheck.Exp$ExpKind,x14:scala.collection.Seq[Any],x15:scala.collection.Seq[Int])): Boolean => {
                                        val x16 = x15.length
                                        val x17 = x16 == 0
                                        x17
                                    }
                                )[ref=Sym(19)],
                                ((x1:Int,x2:sae.typecheck.Exp$ExpKind,x3:scala.collection.Seq[Any],x4:scala.collection.Seq[Int])): scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]] => {
                                    val x5 = px5 // static data: <function1>
                                    val x6 = Seq()
                                    val x8 = x5(x1,x2,x3,x6)
                                    val x9 = (x1,x8)
                                    x9
                                }
                            )[ref=Sym(20)],
                            Sym(352)
                        ),
                        Seq(
                            (
                            (x36: scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]): Int => {
                                val x41 = x36._4
                                val x44 = x41(0)
                                x44
                            },
                            (x37: scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]): Int => {
                                val x45 = x37._1
                                x45
                            }
                            )
                        )
                    )[ref=Sym(58)],
                    ((x21:scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]],x22:scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]])): scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]] => {
                        val x23 = x21._1
                        val x24 = x21._2
                        val x25 = x21._3
                        val x27 = px27 // static data: <function1>
                        val x29 = x22._2
                        val x30 = Seq(x29)
                        val x32 = x27(x23,x24,x25,x30)
                        val x33 = (x23,x32)
                        x33
                    }
                )[ref=Sym(59)],
                projection(
                    equiJoin(
                        equiJoin(
                            selection[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]](
                                table27741867: Table[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]][ref=QueryTable(idb.BagTable@1a74eab,false,false,false)],
                                (x110: scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]): Boolean => {
                                    val x110 = x108._1
                                    val x113 = x110._4
                                    val x114 = x113.length
                                    val x115 = x114 == 2
                                    x115
                                }
                            )[ref=Sym(119)],
                            Recursion(
                                projection(
                                    selection[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]](
                                        table27741867: Table[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]][ref=QueryTable(idb.BagTable@1a74eab,false,false,false)],
                                        ((x12:Int,x13:sae.typecheck.Exp$ExpKind,x14:scala.collection.Seq[Any],x15:scala.collection.Seq[Int])): Boolean => {
                                            val x16 = x15.length
                                            val x17 = x16 == 0
                                            x17
                                        }
                                    )[ref=Sym(19)],
                                    ((x1:Int,x2:sae.typecheck.Exp$ExpKind,x3:scala.collection.Seq[Any],x4:scala.collection.Seq[Int])): scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]] => {
                                        val x5 = px5 // static data: <function1>
                                        val x6 = Seq()
                                        val x8 = x5(x1,x2,x3,x6)
                                        val x9 = (x1,x8)
                                        x9
                                    }
                                )[ref=Sym(20)],
                                Sym(352)
                            ),
                            Seq(
                                (
                                (x36: scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]): Int => {
                                    val x41 = x36._4
                                    val x44 = x41(0)
                                    x44
                                },
                                (x37: scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]): Int => {
                                    val x45 = x37._1
                                    x45
                                }
                                )
                            )
                        )[ref=Sym(137)],
                        Recursion(
                            projection(
                                selection[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]](
                                    table27741867: Table[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]][ref=QueryTable(idb.BagTable@1a74eab,false,false,false)],
                                    ((x12:Int,x13:sae.typecheck.Exp$ExpKind,x14:scala.collection.Seq[Any],x15:scala.collection.Seq[Int])): Boolean => {
                                        val x16 = x15.length
                                        val x17 = x16 == 0
                                        x17
                                    }
                                )[ref=Sym(19)],
                                ((x1:Int,x2:sae.typecheck.Exp$ExpKind,x3:scala.collection.Seq[Any],x4:scala.collection.Seq[Int])): scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]] => {
                                    val x5 = px5 // static data: <function1>
                                    val x6 = Seq()
                                    val x8 = x5(x1,x2,x3,x6)
                                    val x9 = (x1,x8)
                                    x9
                                }
                            )[ref=Sym(20)],
                            Sym(352)
                        ),
                        Seq(
                            (
                            (x141: scala.Tuple2[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]], scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]]): Int => {
                                val x143 = x141._1
                                val x146 = x143._4
                                val x147 = x146(1)
                                x147
                            },
                            (x37: scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]): Int => {
                                val x45 = x37._1
                                x45
                            }
                            )
                        )
                    )[ref=Sym(153)],
                    ((x155:scala.Tuple2[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]], scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]],x156:scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]])): scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]] => {
                        val x157 = x155._1
                        val x160 = x157._1
                        val x67 = px67 // static data: <function1>
                        val x161 = x157._2
                        val x162 = x157._3
                        val x158 = x155._2
                        val x163 = x158._2
                        val x164 = x156._2
                        val x165 = Seq(x163,x164)
                        val x166 = x67(x160,x161,x162,x165)
                        val x167 = (x160,x166)
                        x167
                    }
                )[ref=Sym(169)]
            )[ref=Sym(170)],
            projection(
                equiJoin(
                    equiJoin(
                        equiJoin(
                            selection[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]](
                                table27741867: Table[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]][ref=QueryTable(idb.BagTable@1a74eab,false,false,false)],
                                (x260: scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]): Boolean => {
                                    val x259 = x256._1
                                    val x260 = x259._1
                                    val x263 = x260._4
                                    val x264 = x263.length
                                    val x265 = x264 == 3
                                    x265
                                }
                            )[ref=Sym(270)],
                            Recursion(
                                projection(
                                    selection[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]](
                                        table27741867: Table[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]][ref=QueryTable(idb.BagTable@1a74eab,false,false,false)],
                                        ((x12:Int,x13:sae.typecheck.Exp$ExpKind,x14:scala.collection.Seq[Any],x15:scala.collection.Seq[Int])): Boolean => {
                                            val x16 = x15.length
                                            val x17 = x16 == 0
                                            x17
                                        }
                                    )[ref=Sym(19)],
                                    ((x1:Int,x2:sae.typecheck.Exp$ExpKind,x3:scala.collection.Seq[Any],x4:scala.collection.Seq[Int])): scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]] => {
                                        val x5 = px5 // static data: <function1>
                                        val x6 = Seq()
                                        val x8 = x5(x1,x2,x3,x6)
                                        val x9 = (x1,x8)
                                        x9
                                    }
                                )[ref=Sym(20)],
                                Sym(352)
                            ),
                            Seq(
                                (
                                (x36: scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]): Int => {
                                    val x41 = x36._4
                                    val x44 = x41(0)
                                    x44
                                },
                                (x37: scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]): Int => {
                                    val x45 = x37._1
                                    x45
                                }
                                )
                            )
                        )[ref=Sym(292)],
                        Recursion(
                            projection(
                                selection[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]](
                                    table27741867: Table[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]][ref=QueryTable(idb.BagTable@1a74eab,false,false,false)],
                                    ((x12:Int,x13:sae.typecheck.Exp$ExpKind,x14:scala.collection.Seq[Any],x15:scala.collection.Seq[Int])): Boolean => {
                                        val x16 = x15.length
                                        val x17 = x16 == 0
                                        x17
                                    }
                                )[ref=Sym(19)],
                                ((x1:Int,x2:sae.typecheck.Exp$ExpKind,x3:scala.collection.Seq[Any],x4:scala.collection.Seq[Int])): scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]] => {
                                    val x5 = px5 // static data: <function1>
                                    val x6 = Seq()
                                    val x8 = x5(x1,x2,x3,x6)
                                    val x9 = (x1,x8)
                                    x9
                                }
                            )[ref=Sym(20)],
                            Sym(352)
                        ),
                        Seq(
                            (
                            (x141: scala.Tuple2[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]], scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]]): Int => {
                                val x143 = x141._1
                                val x146 = x143._4
                                val x147 = x146(1)
                                x147
                            },
                            (x37: scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]): Int => {
                                val x45 = x37._1
                                x45
                            }
                            )
                        )
                    )[ref=Sym(312)],
                    Recursion(
                        projection(
                            selection[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]](
                                table27741867: Table[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]]][ref=QueryTable(idb.BagTable@1a74eab,false,false,false)],
                                ((x12:Int,x13:sae.typecheck.Exp$ExpKind,x14:scala.collection.Seq[Any],x15:scala.collection.Seq[Int])): Boolean => {
                                    val x16 = x15.length
                                    val x17 = x16 == 0
                                    x17
                                }
                            )[ref=Sym(19)],
                            ((x1:Int,x2:sae.typecheck.Exp$ExpKind,x3:scala.collection.Seq[Any],x4:scala.collection.Seq[Int])): scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]] => {
                                val x5 = px5 // static data: <function1>
                                val x6 = Seq()
                                val x8 = x5(x1,x2,x3,x6)
                                val x9 = (x1,x8)
                                x9
                            }
                        )[ref=Sym(20)],
                        Sym(352)
                    ),
                    Seq(
                        (
                        (x316: scala.Tuple2[scala.Tuple2[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]], scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]], scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]]): Int => {
                            val x319 = x316._1
                            val x320 = x319._1
                            val x323 = x320._4
                            val x324 = x323(2)
                            x324
                        },
                        (x37: scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]): Int => {
                            val x45 = x37._1
                            x45
                        }
                        )
                    )
                )[ref=Sym(330)],
                ((x332:scala.Tuple2[scala.Tuple2[scala.Tuple4[Int, sae.typecheck.Exp$ExpKind, scala.collection.Seq[Any], scala.collection.Seq[Int]], scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]], scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]]],x333:scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]])): scala.Tuple2[Int, scala.Tuple4[sae.typecheck.Type, scala.Tuple2[scala.collection.immutable.Map[scala.Symbol, sae.typecheck.Type], scala.collection.immutable.Set[sae.typecheck.Constraint]], scala.collection.immutable.Set[sae.typecheck.Requirement], scala.collection.immutable.Set[scala.Symbol]]] => {
                    val x335 = x332._1
                    val x336 = x335._1
                    val x339 = x336._1
                    val x179 = px179 // static data: <function1>
                    val x340 = x336._2
                    val x341 = x336._3
                    val x337 = x335._2
                    val x342 = x337._2
                    val x334 = x332._2
                    val x343 = x334._2
                    val x344 = x333._2
                    val x345 = Seq(x342,x343,x344)
                    val x346 = x179(x339,x340,x341,x345)
                    val x347 = (x339,x346)
                    x347
                }
            )[ref=Sym(349)]
        )[ref=Sym(350)]
    )[ref=Sym(351)]
)